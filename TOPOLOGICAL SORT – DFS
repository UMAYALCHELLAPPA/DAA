import java.util.*;
import java.util.Stack;
class GraphDFS {
    private int V;
    private LinkedList<Integer>[] adj;
    GraphDFS(int v) {
        V = v;
        adj = new LinkedList[v];
        for (int i = 0; i < v; ++i) {
            adj[i] = new LinkedList();
        }
    }
    void addEdge(int v, int w) {
        adj[v].add(w);
    }
    void topologicalSortUtil(int v, boolean visited[], Stack<Integer> s1) {
        visited[v] = true;
        Integer i;
        Iterator<Integer> it = adj[v].iterator();
        while (it.hasNext()) {
            i = it.next();
            if (!visited[i])
                topologicalSortUtil(i, visited, s1);
        }
        s1.push(v);
    }
    void topologicalSort() {
        Stack<Integer> s1 = new Stack<>();
        boolean visited[] = new boolean[V];
        for (int i = 0; i < V; i++)
            visited[i] = false;
        for (int i = 0; i < V; i++)
            if (!visited[i])
                topologicalSortUtil(i, visited, s1);
        System.out.println("Topological Sorting:");
        while (!s1.isEmpty())
            System.out.print(s1.pop() + " ");
    }
    public static void main(String args[]) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number of vertices: ");
        int V = scanner.nextInt();
        GraphDFS g = new GraphDFS(V);
        System.out.print("Enter the number of edges: ");
        int E = scanner.nextInt();

        for (int i = 0; i < E; i++) {
            System.out.print("Enter edge " + (i + 1) + " (source destination): ");
            int source = scanner.nextInt();
            int destination = scanner.nextInt();
            g.addEdge(source, destination);
        }
        g.topologicalSort();
    }
}
