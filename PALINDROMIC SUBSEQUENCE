import java.util.*;
public class Main {
    static int dp[][];
    static void initializeDPTable(int n) {
dp = new int[n][n];
        for (int i = 0; i< n; i++)
            for (int j = 0; j < n; j++)
dp[i][j] = -1;
    }
    private static int LPS(char s[], int low, int high) {
        // If answer for s[low...high] has already been calculated.
        if (dp[low][high] != -1)
            return dp[low][high];
        int ans = 0;
        // Base case 1: String of length 1.
        if (low == high) {
ans = 1;
        }
        else if (high - low == 1) {
            if (s[low] == s[high]) {
ans = 2;	
            } else {
ans = 1;
            }
        }
        else if (s[low] == s[high]) {
ans = 2 + LPS(s, low + 1, high - 1);
        }
        else {
            int leftLPS = LPS(s, low, high - 1);
            int rightLPS = LPS(s, low + 1, high);
            if (leftLPS>= rightLPS) {
ans = leftLPS;
            } else {
ans = rightLPS;
            }
        }
dp[low][high] = ans;
        return dp[low][high];
    }
    private static void printLPS(char s[], int low, int high, StringBuilder sb) {
        if (low > high) {
            return;
        }
        if (low == high) {
sb.append(s[low]);
            return;
        }
        if (s[low] == s[high]) {
sb.append(s[low]);
printLPS(s, low + 1, high - 1, sb);
sb.append(s[high]);
        } else if (dp[low][high - 1] >= dp[low + 1][high]) {
printLPS(s, low, high - 1, sb);
        } else {
printLPS(s, low + 1, high, sb);
        }
    }
    public static void main(String args[]) {
        // Trying for string "abbab"
        String s;
System.out.println("enter the string: ");
        Scanner sc = new Scanner(System.in);
        s=sc.next();
initializeDPTable(s.length());
        int len = LPS(s.toCharArray(), 0, s.length() - 1);
System.out.println("Length of LPS of " + s + " is " + len);
        StringBuilder sb = new StringBuilder();
printLPS(s.toCharArray(), 0, s.length() - 1, sb);
System.out.println("Longest Palindromic Subsequence: " + sb.toString());
    }
}

